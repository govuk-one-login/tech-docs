---
title: Authenticate your user
weight: 5.5
last_reviewed_on: 2025-02-12
review_in: 6 months
---

# Authenticate your user

To get an access token which will allow you to access basic user information, you’ll need to integrate with [OAuth’s Authorization Code Flow](https://openid.net/specs/openid-connect-core-1_0.html).

## Use the integration discovery endpoint

You can use the [integration discovery endpoint][external.oidc-discovery] (viewed at `https://oidc.integration.account.gov.uk/.well-known/openid-configuration`) to get information needed to interact with GOV.UK One Login, for example:

* issuer name
* information about the keys
* supported scopes, which will contain the user attributes your service can request

When you configure your service for production, you can [use the production discovery endpoint](/configure-for-production/#use-the-production-discovery-endpoint).

## Make a request to the `/authorize` endpoint

You can send a request to the `/authorize` endpoint to:

* authenticate your user
* check your user’s level of identity confidence - you must have authenticated your user first

Choose one of the following example messages to make your own `GET` request. You can use the following table to [replace the placeholders in your example message][integrate.replace-example-message].

### Make a request for authentication

To authenticate your user, customise the following example `GET` request by [replacing the example’s placeholder values][integrate.replace-example-message]. 

The following example specifies a medium level of authentication. There’s further guidance on choosing the [level of authentication][integrate.choose-level-of-auth].

```
GET /authorize?response_type=code
&scope=YOUR_SCOPES
&client_id=YOUR_CLIENT_ID
&state=STATE
&redirect_uri=YOUR_REDIRECT_URI
&nonce=aEwkamaos5B
&vtr=["Cl.Cm"]
&ui_locales=en

HTTP/1.1
Host: oidc.integration.account.gov.uk
```

<%= warning_text('This code example uses formatting that makes it easier to read. If you copy the example, you must make sure the request is:<ul><li>a continuous line of text separating each parameter with an ampersand (&)</li><li>not split across multiple lines</li><li>without any additional separators such as newline, commas or tabs</li></ul>') %>

### Make a request for authentication and identity

If you need to authenticate your user and check their identity, you should send 2 separate requests: one for authentication and one for identity. 

1. [Send a request to the `/authorize` endpoint to authenticate your user][integrate.make-authorization-request] specifying the Vector of Trust (`vtr`) parameter as `Cl.Cm`.
1. Send a request for identity to the `/authorize` endpoint specifying the `vtr` as `Cl.Cm.P2`.

By using 2 separate requests: 

* more users are likely to create their account successfully
* you can track which users could not prove their identity
* you can support your users better when returning from an in-person identity check because you’ll have authenticated them previously
* you simplify the migration of existing users to GOV.UK One Login

The following example uses medium authentication (`Cl.Cm`) and a medium level of identity confidence (`P2`). There’s further guidance on choosing the [level of authentication][integrate.choose-level-of-auth] and choosing the [level of identity confidence][integrate.choose-level-of-confidence].

You can [replace your example's placeholder values][integrate.replace-example-message].

```
GET /authorize?response_type=code
&scope=YOUR_SCOPES
&client_id=YOUR_CLIENT_ID
&state=STATE
&redirect_uri=YOUR_REDIRECT_URI
&nonce=aEwkamaos5B
&vtr=["Cl.Cm.P2"]
&ui_locales=en
&claims=<claims-request>
HTTP/1.1
Host: oidc.integration.account.gov.uk
```

<%= warning_text('This code example uses formatting that makes it easier to read. If you copy the example, you must make sure the request is:<ul><li>a continuous line of text separating each parameter with an ampersand (&)</li><li>not split across multiple lines</li><li>without any additional separators such as newline, commas or tabs</li></ul>') %>

#### Create a URL-encoded JSON object for `<claims-request>`

After you’ve made a request for authentication and identity, you should then create a URL-encoded JSON object for ``<claims-request>``. Your JSON object should look similar to this example:

```
{
  "userinfo": {
    "https://vocab.account.gov.uk/v1/coreIdentityJWT": null,
    "https://vocab.account.gov.uk/v1/address": null,
    "https://vocab.account.gov.uk/v1/passport": null,
    "https://vocab.account.gov.uk/v1/drivingPermit": null,
    "https://vocab.account.gov.uk/v1/returnCode": null 
  }
}
```

You can only request user attributes to be returned in the `/userinfo` response. You cannot configure the claims returned in the [ID token][integrate.understand-id-token].

### Secure your authorisation request parameters with JWT 

You can use a JWT-secured OAuth 2.0 authorisation request (JAR) with encoded parameters to protect your request from attacks and hackers. 

GOV.UK One Login follows the [OIDC principles on passing request objects](https://openid.net/specs/openid-connect-core-1_0.html#RequestObject).

1. Build a request object and sign it using the [private key you created][integrate.generate-key-pair] when setting up your integration with GOV.UK One Login.
1. Encode the signed request object.
1. Make a `GET` request replacing `YOUR_REQUEST_OBJECT` with your signed and encoded request object.

Use this example to make your own `GET` request, replacing the placeholder values: 

```
GET /authorize?response_type=code
&scope=YOUR_SCOPES
&client_id=YOUR_CLIENT_ID
&request=YOUR_REQUEST_OBJECT
HTTP/1.1
Host: oidc.integration.account.gov.uk
```

You must make sure:

* `response_type`, `scope`, and `client_id` are identical in the query parameters and the request object
* you do not set any other OIDC parameters using query parameters

Before you encode and sign the request object, it should look similar to this example:

```
{
  "aud":   "https://oidc.integration.account.gov.uk/authorize",
  "iss": "YOUR_CLIENT_ID",
  "response_type": "code",
  "client_id": "YOUR_CLIENT_ID",
  "redirect_uri": "https://client.example.org/cb",
  "scope": "YOUR_SCOPES",
  "state": "af0ifjsldkj",
  "nonce": "n-0S6_WzA2Mj",
  "vtr": [
    "Cl.Cm.P2"
  ],
  "ui_locales": "en",
  "claims": {
    "userinfo": {
      "https://vocab.account.gov.uk/v1/coreIdentityJWT": null,
      "https://vocab.account.gov.uk/v1/address": null,
      "https://vocab.account.gov.uk/v1/passport": null,
      "https://vocab.account.gov.uk/v1/drivingPermit": null
    }
  }
}
```

You can [replace your example’s placeholder values][integrate.replace-example-message].


### Replace the placeholder values in your example

Use the guidance in the following table to replace placeholder values in your example message.


| Parameter       | Required or optional | Description    |
|-----------------|----------------------|----------------|
| `response_type` | Required             | You must set this value to be code: `response_type=code`.<br><br>If you’re using JAR, make sure the `response_type` values in the query parameters and the request object are identical. |
| `scope`         | Required             | A space-separated list of scopes. You must include `openid` as one scope value. If you request `openid` but also request other incorrect scopes, the error `invalid_scope` will return with an HTTP 302 instead.<br><br>You should refer to the guidance on [choosing which user attributes your service can request][integrate.choose-user-attributes] for the `scope` parameter.<br><br>If you’re using JAR, make sure the `scope` values in the query parameters and the request object are identical. |
| `client_id`     | Required             | The [client identifier][integrate.client-id], which we generated for you when you [registered your service to use GOV.UK One Login][integrate.register-your-service] must match your client configuration.<br><br>If you’re using JAR, make sure the `client_id` values in the query parameters and the request object are identical. |
| `state`         | Required             | When you receive a response at the redirect URL, there must be a way to verify the response came for a request which you sent. The `state` value solves this issue by binding the request and response, which reduces impact of [Cross Site Request Forgery](https://owasp.org/www-community/attacks/csrf) attacks.<br>This value will be returned to the client in the authentication response. |
| `redirect_uri`  | Required             | You’ll have specified your `redirect_uri` when you [registered your service to use GOV.UK One Login][integrate.register-your-service].<br><br>To avoid an `HTTP 400 Bad Response` error, the redirect URI must exactly match one of the URIs configured in your client configuration and also include the protocol `https://` or `http`.<br><br>If you’re using request parameters, the value must be URL-encoded. |
| `nonce`         | Required             | A unique value generated by your application that is used to verify the integrity of the `id_token` and mitigate replay attacks.<br>This value will be present in the `id_token` and should include the per-session state, as well as being impossible for attackers to guess.<br>Your application will need to verify the `nonce` claim value is the same as the `nonce` parameter sent in the authentication request. |
| `aud`           | Optional             | If you’re using JAR, you must include `aud` in your JSON object.<br><br>You must set this value to specify GOV.UK One Login’s authorisation server as the intended audience: `aud=https://oidc.integration.account.gov.uk/authorize`. |
| `iss`           | Optional             | If you’re using JAR, the `iss` parameter is required.<br><br>You must set this value to be your `client_id`. GOV.UK One Login generated your `client_id` when you [registered your service to use GOV.UK One Login][integrate.register-your-service]. |
| `ui_locales`    | Optional             | GOV.UK One Login supports English and Welsh as language choices. <br><br> If your service is in Welsh, you may want to display GOV.UK One Login in Welsh for a consistent user experience. You can use `ui_locales` to do this. <br> <br> In the `ui_locales` parameter, you can choose either `en` (English) or `cy` (Welsh). <br><br> Using `ui_locales` is optional. If you do not include it, your service will continue using English by default. <br><br> GOV.UK One Login does not support any other languages. |
| `vtr`           | Optional             | The `vtr` parameter represents ‘Vectors of Trust’ where you request authentication and, optionally, identity proving. For example, if you want the medium level of authentication and medium identity confidence, request `vtr=[“Cl.Cm.P2”]`. <br><br>You selected your Vector of Trust when you [chose the level of authentication][integrate.choose-level-of-auth] and [the level of identity confidence][integrate.choose-level-of-confidence] for your service.<br><br>You can read more about how to combine the vectors for authentication level and identity confidence in [Section 3 of RFC 8485](https://datatracker.ietf.org/doc/html/rfc8485#section-3.1). If you need identity proving, you must request `Cl.Cm` (the medium level of authentication).<br><br>If you do not specify the `vtr` parameter, your service will automatically log your users in at the medium level of authentication (`Cl.Cm`). This means you will not receive identity attributes in your response. |
| `claims`        | Optional             | To get the identity attributes your service needs, you should specify these in the `claims` parameter using the `/userinfo` endpoint. The `/userinfo` endpoint returns a JSON object listing the requested claims.<br><br>You can read more about [choosing which user attributes your service can request][integrate.choose-user-attributes].<br><br>You can [read more about the structure of the claims request in OpenID Connect section 5.5](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter). |
| `max_age`       | Optional             | `max_age` is only available to services not on the GOV.UK domain and those handling particularly sensitive data. When the `max_age` parameter is included in your request, your user will be forced to re-authenticate if the time in seconds since authentication is greater than `max_age`. `max_age` must be set to zero or a positive integer. <br><br>You'll need to [contact GOV.UK One Login support](https://www.sign-in.service.gov.uk/support) to request to use `max_age`. |
| `code_challenge`| Optional             | `code_challenge` is part of the Proof Key for Code Exchange (PKCE) protocol and helps protect against 'Authorization Code' interception attacks on authorisation requests. Your service generates the `code_challenge` by transforming a `code_verifier` using a `code_challenge_method`. This parameter is required if your [client configuration enforces PKCE](/configure-for-production/#use-the-table-to-understand-the-json-configuration). <br><br>You can [read more about PKCE in RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636).   |
| `code_challenge_method`| Optional      |`code_challenge_method` specifies which [transformation method](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2) your service used to generate the `code_challenge`. If your request includes `code_challenge` you must include this field. This parameter is required if your [client configuration enforces PKCE](/configure-for-production/#use-the-table-to-understand-the-json-configuration)<br><br>GOV.UK One Login only supports the `code_challenge_method` `S256`.|


### Generate an authorisation code

If your user does not have an existing session they’re signed in to when your service makes the request to the `/authorize` endpoint, the OIDC sign-in page will open. Your user can enter their details on this page to authenticate themselves.

If your user has an existing session, or after they authenticate, they will be redirected to the `redirect_uri` your service specified.

The authorisation code generated by your user’s session can be used once and displays in the query string of the URL, for example:

```
HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?code=AUTHORIZATION_CODE&state=xyzABC123
```

If your request included the `state` parameter, the URI will also include this parameter.

### Error handling for ‘Make a request to the `/authorize` endpoint’

You must check the HTTP return code from   the `/authorize` request.

#### HTTP 400 Bad Request

If your `GET` request to the `/authorize` endpoint produces a `Request is missing parameters` or `Invalid request` with `HTTP 400 (Bad Request)`, it might be because the parameters are not included correctly.

You should [check you have included the correct parameters][integrate.replace-example-message], especially the `client_id`, `redirect_uri`, `response_type` and `scope` parameters.

#### HTTP 302 Found  
To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an `error` and an `error_description` which will provide you with information.

If there’s an error in your request, you’ll be redirected to the URI you specified for `redirect_uri` in the authorisation URL. You’ll be able to see the error description tagged onto the end of the authorisation URL, for example:

```
HTTP/1.1 302 Found
Location: https://YOUR_REDIRECT_URI?error=invalid_request
&error_description=Unsupported%20response
&state=1234
```

<%= partial "partials/authorize-errors" %>


## Make a token request

You need to exchange your [authorisation code][integrate.generate-auth-code] for tokens. You'll use these tokens to make a call to the `/userinfo` endpoint.

To exchange your authorisation code for tokens, you'll need to make a `POST` request to the `/token` endpoint using the client authentication method `private_key_jwt` or `client_secret_post` (only available for certain third-party platforms). There’s further guidance on [using the correct token authentication method](/before-integrating/use-correct-token-authentication-method/). 

Before you can make a `POST` request, you need to:

1. Create a JWT assertion.
1. Include the JWT assertion in your `POST` request.

GOV.UK One Login will then authenticate your request by verifying the signature and payload of the JWT assertion. This authentication will generate a token response, which will include:

* an access token
* an ID token

### Create a JWT assertion

To create a JWT assertion, you need to:

1. Use the [key pair you generated][integrate.generate-key-pair] earlier in the process.
1. Create a JWT.
1. Sign your JWT with the key you created - how you sign your JWT will vary depending on the language you’re using.

#### Create a JWT

To create a JWT assertion, you need to create a JWT which contains certain required claims. There’s some optional claims you can choose to include or not include.


| Claim   | Required or recommended | Description    |
|---------|-------------------------|----------------|
| `aud`   | Required                | `aud` stands for 'audience'. This identifies GOV.UK One Login’s authorisation server as an intended audience. This value should be the URL: https://oidc.integration.account.gov.uk/token. |
| `iss`   | Required                | `iss` stands for 'issuer'. This claim should contain your `client_id` you got when you [registered your service to use GOV.UK One Login][integrate.register-your-service]. |
| `sub`   | Required                | `sub` stands for 'subject'. This claim should contain your `client_id` you got when you [registered your service to use GOV.UK One Login][integrate.register-your-service]. There’s further guidance on how to use this value in the [response to the `/userinfo` endpoint](https://docs.sign-in.service.gov.uk/integrate-with-integration-environment/authenticate-your-user/#receive-response-for-retrieve-user-information).|
| `exp`   | Required                | `exp` stands for 'expiration time'. This is the expiration time for this token, which must be an integer timestamp representing the number of seconds since the [Unix Epoch][external.unix-epoch].  This is the time after which you must not accept the JWT. We recommend an expiration after 5 minutes. <br>The current date and time must be before the expiration date and time listed in the `exp` claim. |
| `jti`   | Required                | `jti` stands for ‘JWT ID’. In this claim, you should include a unique identifier for the token. <br>This unique identifier will prevent the token being reused as your application must only use these tokens once. |
| `iat`   | Recommended             | `iat` stands for ‘issued at’. This identifies the time at which your application created the JWT. You can use this claim to understand the age of the JWT.<br>This must appear as an integer timestamp representing the number of seconds since the [Unix Epoch][external.unix-epoch]. |

Your JWT body will look similar to this example:

```
{
  "aud":"https://oidc.integration.account.gov.uk/token",
  "iss":"229pcVGuHP1lXX37T7Wfbr5SIgm",
  "sub":"229pcVGuHP1lXX37T7Wfbr5SIgm",
  "exp":1536165540,
  "jti":"RANDOM_VALUE_JTI",
  "iat":1536132708
}
```

Once you have created your JWT and signed your JWT with the key pair, you have created your JWT assertion.

### Make a `POST` request to the `/token` endpoint

Now you have generated your JWT assertion, you’re ready to make a `POST` request to the `/token` endpoint, for example:

```
POST /token HTTP/1.1
Host: oidc.integration.account.gov.uk
Content-Type: application/x-www-form-urlencoded
User-Agent: my-platform/version (https://my-service-url.gov.uk)

grant_type=authorization_code
&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient.example.org%2F
&client_assertion_type=urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
&client_assertion=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIiLCJpc3MiOiIiLCJhdWQi
OiIiLCJqdGkiOiIifQ.r1Ylfhhy6VNSlhlhW1N89F3WfIGuko2rvSRWO4yK1BI
```

<%= warning_text('This code example uses formatting that makes it easier to read. If you copy the example, you must make sure the request is:<ul><li>a continuous line of text separating each parameter with an ampersand (&)</li><li>not split across multiple lines</li><li>without any additional separators such as newline, commas or tabs</li></ul>') %>
<%= warning_text('GOV.UK One Login requires the <a href="/before-integrating/set-user-agent-header/"><code>User-Agent</code> header</a> to be populated. If it absent or empty, your service will receive a 403 error') %>

| Parameter               | Required or recommended | Description                                                                                                                                            |
|-------------------------|-------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|
| `grant_type`            | Required                | You need to set the parameter to `authorization_code`. |
| `redirect_uri`          | Required                | You’ll have specified your `redirect_uri` when you made the initial authorisation request.                                                               |
| `client_assertion`      | Required                | You’ll include the JWT assertion you created in the payload when you make the `POST` request to the `/token` endpoint.                                     |
| `client_assertion_type` | Required                | When you’re using `private_key_jwt`, you must set the value to `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`.                                   |
| `code`                  | Required                | The code you received when you [generated an authorisation code][integrate.generate-auth-code].                                                                                        |
| `code_verifier`         | Optional                | You should only include this parameter if your original `/authorize` request includes the `code_challenge` and `code_challenge_method` parameters.                                                                                        |

### Receive response for ‘Make a token request’

If your token request is successful, the `/token` endpoint will return a response similar to this example:

```
HTTP/1.1 200 OK
Content-Type: application/json
{
  "access_token": "SlAV32hkKG",
  "token_type": "Bearer",
  "expires_in": 180,
  "id_token":"eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzc
    yI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg"
}
```

You can use the following table to understand the response for ‘Make a token request’.

| Parameter       | Description    |
|-----------------|----------------|
| `access_token`  | The access token value is an opaque access token which you can use with the `/userinfo` endpoint to return a user's profile. |
| `token_type`    | The token type value. GOV.UK One Login only supports the [bearer token][external.bearer-token]. |
| `expires_in`    | The length of time the token is valid for. This is displayed in seconds. |
| `id_token`      | A signed JWT that contains basic attributes about the user. <br><br>By default, GOV.UK One Login signs this JWT using the `ES256` algorithm.<br><br>If your service cannot support the `ES256` algorithm (for example, some third-party tooling does not support `ES256`), GOV.UK One Login can sign the JWT using the `RS256` algorithm. You’ll have specified whether your service can support `ES256` when you [registered your service to use GOV.UK One Login][integrate.register-your-service].<br><br>The public key used to verify this JWT is available from the `jwks_uri` parameter found in the [discovery endpoint][external.oidc-discovery]. |

### Understand your ID token

The `id_token` parameter in the response for ‘Make a token request’ contains the following claims:


```
{
  "at_hash": "ZDevf74CkYWNPa8qmflQyA",
  "sub": "urn:fdc:gov.uk:2022:VtcZjnU4Sif2oyJZola3OkN0e3Jeku1cIMN38rFlhU4",
  "aud": "YOUR_CLIENT_ID",
  "iss": "https://oidc.integration.account.gov.uk/",
  "vot": "Cl.Cm",
  "exp": 1704894526,
  "iat": 1704894406,
  "nonce": "lZk16Vmu8-h7r8L8bFFiHJxpC3L73UBpfb68WC1Qoqg",
  "vtm": "https://oidc.integration.account.gov.uk/trustmark",
  "sid": "dX5xv0XgHh6yfD1xy-ss_1EDK0I"
  "auth_time": 1704894300
 }

```

You can use the following table to understand the ID token’s claims.

| Claim   | Description         |
|---------|---------------------|
| `at_hash` | `at_hash` stands for 'access token hash'. You use `at_hash` to validate your access token. This is not mandatory. There is further [guidance on `at_hash` in the Open ID Connect specification](https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken).  |
| `sub`   | `sub` stands for the subject identifier or the unique ID of a user. |
| `aud`   | `aud` stands for the audience, which will be the `client_id` you received when you [registered your service to use GOV.UK One Login][integrate.register-your-service]. |
| `iss`   | `iss` stands for the GOV.UK One Login OpenID Provider's Issue identifier as specified in the [discovery endpoint][external.oidc-discovery]. |
| `vot`   | `vot` stands for 'Vector of Trust'. Check the `vot` matches the authentication protection level you requested in your authorise request. The `vot` claim will only contain the credential trust level and not the level of confidence, even if you make an identity request.  |
| `exp`   | `exp` stands for ‘expiration time’. This is the expiration time for this token, which will be an integer timestamp representing the number of seconds since the [Unix Epoch][external.unix-epoch]. |
| `iat`   | `iat` stands for ‘issued at’. This identifies the time at which GOV.UK One Login created the JWT. You can use this claim to understand the age of the JWT.This will appear as an integer timestamp representing the number of seconds since the [Unix Epoch][external.unix-epoch]. |
| `nonce` | The `nonce` value your application provided when you made the request to the `/authorize` endpoint. |
| `vtm`   | `vtm` stands for 'vector trust mark'. This is an HTTPS URL which lists the range of values GOV.UK One Login accepts and provides.  |
| `sid`   | `sid` stands for ‘session identifier’. This uniquely identifies the user's journey within GOV.UK One Login. |
| `auth_time` | `auth_time` is the time at which your user last authenticated. This will be an integer timestamp representing the number of seconds since the [Unix Epoch][external.unix-epoch]. |

Now you’ve understood what’s in your ID token, you’ll need to validate it.

### Validate the signature of the ID token using a public key

To validate the signature of the ID token, you must use a public key. GOV.UK One Login publishes the public keys in a [JWKS document](https://datatracker.ietf.org/doc/html/rfc7517). 

<%= warning_text('GOV.UK One Login will regularly rotate its public keys. You must <a href="/integrate-with-integration-environment/authenticate-your-user/#use-the-kid-key-id-to-see-which-public-key-signed-the-id-token"> read the guidance on understanding GOV.UK One Login’s key rotation </a> to make sure your application continues to work as expected.') %>

This is an example of a JWKS document published by GOV.UK One Login:

```json
{
  "keys": [
    {
      "kty": "EC",
      "use": "sig",
      "crv": "P-256",
      "kid": "644af598b780f54106ca0f3c017341bc230c4f8373f35f32e18e3e40cc7acff6",
      "x": "5URVCgH4HQgkg37kiipfOGjyVft0R5CdjFJahRoJjEw",
      "y": "QzrvsnDy3oY1yuz55voaAq9B1M5tfhgW3FBjh_n_F0U",
      "alg": "ES256"
    },
    {
      "kty": "EC",
      "use": "sig",
      "crv": "P-256",
      "kid": "e1f5699d068448882e7866b49d24431b2f21bf1a8f3c2b2dde8f4066f0506f1b",
      "x": "BJnIZvnzJ9D_YRu5YL8a3CXjBaa5AxlX1xSeWDLAn9k",
      "y": "x4FU3lRtkeDukSWVJmDuw2nHVFVIZ8_69n4bJ6ik4bQ",
      "alg": "ES256"
    },
    {
      "kty": "RSA",
      "e": "AQAB",
      "use": "sig",
      "kid": "76e79bfc350137593e5bd992b202e248fc97e7a20988a5d4fbe9a0273e54844e",
      "alg": "RS256",
      "n": "lGac-hw2cW5_amtNiDI-Nq2dEXt1x0nwOEIEFd8NwtYz7ha1GzNwO2LyFEoOvqIAcG0NFCAxgjkKD5QwcsThGijvMOLG3dPRMjhyB2S4bCmlkwLpW8vY4sJjc4bItdfuBtUxDA0SWqepr5h95RAsg9UP1LToJecJJR_duMzN-Nutu9qwbpIJph8tFjOFp_T37bVFk4vYkWfX-d4-TOImOOD75G0kgYoAJLS2SRovQAkbJwC1bdn_N8yw7RL9WIqZCwzqMqANdo3dEgSb04XD_CUzL0Y2zU3onewH9PhaMfb11JhsuijH3zRA0dwignDHp7pBw8uMxYSqhoeVO6V0jz8vYo27LyySR1ZLMg13bPNrtMnEC-LlRtZpxkcDLm7bkO-mPjYLrhGpDy7fSdr-6b2rsHzE_YerkZA_RgX_Qv-dZueX5tq2VRZu66QJAgdprZrUx34QBitSAvHL4zcI_Qn2aNl93DR-bT8lrkwB6UBz7EghmQivrwK84BjPircDWdivT4GcEzRdP0ed6PmpAmerHaalyWpLUNoIgVXLa_Px07SweNzyb13QFbiEaJ8p1UFT05KzIRxO8p18g7gWpH8-6jfkZtTOtJJKseNRSyKHgUK5eO9kgvy9sRXmmflV6pl4AMOEwMf4gZpbKtnLh4NETdGg5oSXEuTiF2MjmXE"
    }
  ]
}

```


#### Use the `kid` (key ID) to see which public key signed the ID token

When validating an ID token, the JWT header will include the `kid`.

Follow the steps below to use the `kid` to find out which public key from the JWKS document was used to sign the JWT. This is important because GOV.UK One Login may have rotated its public keys and using the incorrect key will break your integration. 

1. Download the JWKS document from the JWKS endpoint. This endpoint can be found as the `jwks_uri` value on the discovery endpoint: 
  * Integration environment: [https://oidc.integration.account.gov.uk/.well-known/openid-configuration](https://oidc.integration.account.gov.uk/.well-known/openid-configuration) 
  * Production environment: [https://oidc.account.gov.uk/.well-known/openid-configuration](https://oidc.account.gov.uk/.well-known/openid-configuration).
1. Find the object in `keys` which has a `kid` field matching the `kid` from the JWT header in the ID token. 
1. You must [validate that the JWT `alg` header matches](https://datatracker.ietf.org/doc/html/rfc8725#section-3.1) what was returned from the `jwks_uri`.
1. Use the key to verify the signature of the ID token. 


<%= warning_text('If the `kid` in the JWT header does not match a `kid` in the JWKS document, you must not trust that ID token. You should contact GOV.UK One Login through the <a href="https://www.sign-in.service.gov.uk/contact-us">contact us form</a>, including the name of your service and client ID.') %>

#### Caching the JWKS document 

You should cache the returned JWKS document and reuse it instead of downloading the JWKS document for every signature you need to verify. The JWKS document will not regularly change and caching it reduces latency for your service.

The `Cache-Control` HTTP header field in the JWKS endpoint contains a suggested caching period in seconds. This caching period is the time period that GOV.UK One Login expects the JWKS document to remain valid. 

For example, a header with the value `Cache-Control: max-age=86400` would mean you cache the JWKS document for the `max-age` of 1 day (86400 seconds).

You may not be able to refresh the cache from GOV.UK One Login’s JWKS endpoint if there's a temporary outage. If this happens, you should continue to trust the cached version until you’re able to refresh the cache.

For more details on the `Cache-Control` header, see [RFC 9111: HTTP Caching](https://www.rfc-editor.org/rfc/rfc9111#field.cache-control). 

#### Understanding the ID token signing key rotations

GOV.UK One Login will rotate the keys as follows:

- In the integration environment -  in Jan 2026 and Feb 2026 to let you test your integration.
- In the production environment - every 6 months starting from Mar 2026. 
- In some scenarios we may rotate keys at short notice.

New public keys will appear in the `keys` array of the JWKS document before any rotation.

Use the `Cache-Control` headers and [guidance on caching the JWKS document](/integrate-with-integration-environment/authenticate-your-user/#caching-the-jwks-document) to regularly poll the JWKS endpoint to detect new versions and make sure you’re using the latest key available.

Once GOV.UK One Login has removed the old public key from the JWKS document, it will no longer be valid. Do not trust ID tokens signed with that key.


#### Validate your ID token

  <%= warning_text('You must perform all of the validation described below, or your integration may not be secure') %>


1. If you’re using a library, check whether your library has support for validating ID tokens.
1. The value of `iss` must exactly match the Issuer Identifier as specified in GOV.UK One Login’s [discovery endpoint][external.oidc-discovery].
1. The `aud` claim must contain your client ID you received when you [registered your service to use GOV.UK One Login][integrate.register-your-service].
1. You must validate the signature according to the [JSON Web Signature Specification](https://datatracker.ietf.org/doc/html/rfc7515). Your application must [validate the signature of the ID token using a public key](/integrate-with-integration-environment/authenticate-your-user/#validate-the-signature-of-the-id-token-using-a-public-key).
1. Check the current time is before the time in the `exp` claim.
1. Check the current time is after the time in the `iat` claim.
1. If you set a `nonce` value in the request to the `/authorize` endpoint, check this matches the `nonce` value in the ID token.
1. The `vot` claim must contain the credential trust level you asked for in the request to the `/authorize` endpoint. The `vot` claim will only contain the credential trust level, not the level of confidence, even if you make an identity request. For example, if you set the `vtr` parameter to `Cl.Cm.P2`, you must ensure the `vot` claim is equal to `Cl.Cm`.
1. If you included `max_age` in the request to the `/authorize` endpoint, you must validate that `auth_time` is greater than or equal to the current time minus the value of `max_age`. If false, you should reject the ID token and redirect the user to re-authenticate by sending a new request to the `/authorize` endpoint including `max_age`.

### Error handling for ‘Make a token request’

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an `error` and an `error_description` which will provide you with information.

If the token request is invalid or unauthorised, you’ll receive an error response with the `Content-Type` of application/json, for example:

```
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
  "error": "invalid_request"
  "error_description": "invalid scope"
}
```

<%= partial "partials/token-errors" %>


## Retrieve user information

You can retrieve information about your users by making a request to the `/userinfo` endpoint.

Make the request to the `/userinfo` endpoint using the access token you received when making a token request.
Using the authorisation header field, send the access token as a [bearer token](https://oauth.net/2/bearer-tokens/).
You’ll receive a JSON object which contains a collection of name and value pairs.

An example request to the `/userinfo` endpoint would look similar to this example:

```
GET /userinfo HTTP/1.1
Host: oidc.integration.account.gov.uk
Authorization: Bearer <access_token>
User-Agent: my-platform/version (https://my-service-url.gov.uk)
```

<%= warning_text('GOV.UK One Login requires the <a href="/before-integrating/set-user-agent-header/"><code>User-Agent</code> header</a> to be populated. If it absent or empty, your service will receive a 403 error') %>

### Receive response for ‘Retrieve user information’

The response you’ll get after making a request to the `/userinfo` endpoint will be a JSON object containing user attributes.

If you included all the scopes when you were [choosing which user attributes your service can request][integrate.choose-user-attributes] and made a request to the `/userinfo` endpoint, the response would look similar to this:

```
HTTP/1.1 200 OK
Content-Type: application/json
{
  "sub": "urn:fdc:gov.uk:2022:56P4CMsGh_02YOlWpd8PAOI-2sVlB2nsNU7mcLZYhYw=",
  "email": "test@example.com",
  "email_verified": true,
  "phone_number": "+441406946277",
  "phone_number_verified": true
}
```

If you included a [level of identity confidence][integrate.choose-level-of-confidence] when you made a request to the `/userinfo` endpoint, you’ll also see identity attributes in the response. You can read more about [how to prove your user's identity](../prove-users-identity/).

| Claim returned | Description  |
| :---- | :---- |
| `sub` | The subject identifier (`sub`) is the unique ID for a user. This will not change unless your user deletes their GOV.UK One Login and sets it up again. <br><br> Do not use the `sub` as the primary identifier for your user. <br><br> Instead, generate your own unique value for your user within your service and map this against the GOV.UK One Login `sub`.  <br><br> Mapping the `sub` makes account recovery easier. For example, if a user deletes their GOV.UK One Login, you can re-map the user’s new `sub` to your service without creating a new primary identifier for your user. |
| `email` | The email address your user entered when they registered their GOV.UK One Login. <br><br> Do not:<br><ul><li> use `email` as the primary identifier for your user (the `email` claim can change or an end user can lose access to it which makes it unreliable as a unique identifier)  </li><li>ask your user to create a GOV.UK One Login with a specific email address, for example, a university email – if you need this, you’ll need to build additional functionality to verify it yourself </li><li>ask your user to change the email address they use for their GOV.UK One Login |
| `email_verified`  | This means the email was verified using a one-time code when the user created their account. This is always `true`. |
| `phone_number` | This is the phone number your user entered when they registered their GOV.UK One Login. This will not appear if the user used an authenticator app for their two-factor authentication. <br> </br> <br> </br> This will return in the E.164 format with no spaces for both UK and international phone numbers: `+{country-code}Number`.  |
| `phone_number_verified` | This will be returned as:<br><ul> </li><li>`true` when the user has selected the text message option for receiving a security code </li><li>`false` when the user has selected the authenticator app option for receiving a security code  |
| `walletSubjectId` | This will be returned in the format: <br>`urn:fdc:wallet.account.gov.uk:2024:3c_jJtXcLttICSNrkW7M1vO2_w-SMDm2nrHsZpWQQ9` <br><br>where the part after `urn:fdc:` is [Base 64 Encoding with URL and Filename Safe Alphabet](https://datatracker.ietf.org/doc/html/rfc4648#section-5) of the output from a SHA256 hash function. <br><br>`walletSubjectId` is a pairwise identifier that GOV.UK Wallet uses when it issues a credential. By comparing the returned value with the value GOV.UK Wallet submits when requesting a credential, you can be sure that the user logged into your service and GOV.UK Wallet are the same user. <br><br>You must include this scope if you plan to [onboard with GOV.UK Wallet](https://docs.wallet.service.gov.uk/before-integrating.html#onboard-with-gov-uk-one-login) after you have onboarded with GOV.UK One Login.     |


### Error handling for ‘Retrieve user information’

To understand more about what the error is, you can look in the response. Depending on the type of error you receive, the response may contain an `error` and an `error_description` which will provide you with information.

When a request fails, the `/userinfo` endpoint will respond with:

* an HTTP status code (usually 401 or 403)
* an error code (usually error parameter and an error description) included in the response

An error response for the `/userinfo` endpoint would look similar to this example:

```
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer error="invalid_token",
error_description="The Access Token expired"
```

<%= partial "partials/userinfo-errors" %>

Once you’ve authenticated your user, you can continue with [proving your user’s identity][integrate.identity-proving]. 

If you’re only authenticating your users, skip the next section and move onto [managing your users' sessions](https://docs.sign-in.service.gov.uk/integrate-with-integration-environment/managing-your-users-sessions/#managing-your-users-39-sessions).

<%= partial "partials/links" %>
